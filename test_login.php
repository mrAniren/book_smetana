<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<h2>üîç –¢–ï–°–¢ –õ–û–ì–ò–ù–ê</h2>";

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
try {
    require_once 'includes/Database.php';
    require_once 'includes/Auth.php';
    require_once 'includes/functions.php';
    
    $db = Database::getInstance();
    $auth = new Auth();
    
    echo "<h3>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î:</h3>";
    
    $stmt = $db->query("SELECT id, email, password_hash, role FROM users ORDER BY id");
    $users = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    echo "<table border='1' cellpadding='5'>";
    echo "<tr><th>ID</th><th>Email</th><th>Password Hash</th><th>Role</th><th>Hash Length</th><th>Is MD5?</th></tr>";
    foreach ($users as $user) {
        $isMd5 = (strlen($user['password_hash']) === 32 && ctype_xdigit($user['password_hash']));
        echo "<tr>";
        echo "<td>" . $user['id'] . "</td>";
        echo "<td>" . $user['email'] . "</td>";
        echo "<td>" . substr($user['password_hash'], 0, 20) . "...</td>";
        echo "<td>" . $user['role'] . "</td>";
        echo "<td>" . strlen($user['password_hash']) . "</td>";
        echo "<td>" . ($isMd5 ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢") . "</td>";
        echo "</tr>";
    }
    echo "</table>";
    
    echo "<h3>2. –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ verifyPassword:</h3>";
    
    $testPassword = 'admin123';
    echo "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: $testPassword<br>";
    
    foreach ($users as $user) {
        echo "<h4>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " . $user['email'] . "</h4>";
        echo "–•–µ—à –≤ –ë–î: " . substr($user['password_hash'], 0, 20) . "...<br>";
        
        // –¢–µ—Å—Ç MD5
        $md5Hash = md5($testPassword);
        echo "MD5 –æ—Ç '$testPassword': $md5Hash<br>";
        echo "MD5 —Å–æ–≤–ø–∞–¥–∞–µ—Ç: " . ($md5Hash === $user['password_hash'] ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢") . "<br>";
        
        // –¢–µ—Å—Ç verifyPassword —Ñ—É–Ω–∫—Ü–∏–∏
        $verifyResult = verifyPassword($testPassword, $user['password_hash']);
        echo "verifyPassword —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " . ($verifyResult ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢") . "<br><br>";
    }
    
    echo "<h3>3. –¢–µ—Å—Ç Auth->login:</h3>";
    
    foreach ($users as $user) {
        echo "<h4>–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –¥–ª—è: " . $user['email'] . "</h4>";
        try {
            $result = $auth->login($user['email'], $testPassword);
            if ($result) {
                echo "‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω<br>";
                echo "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " . json_encode($result) . "<br>";
            } else {
                echo "‚ùå –õ–æ–≥–∏–Ω –Ω–µ—É—Å–ø–µ—à–µ–Ω<br>";
            }
        } catch (Exception $e) {
            echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "<br>";
        }
        echo "<br>";
    }
    
} catch (Exception $e) {
    echo "<div style='color: red;'>‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "</div>";
}

echo "<br>üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!";
?>
